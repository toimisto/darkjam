[gd_scene load_steps=10 format=2]

[ext_resource path="res://assets/bg.png" type="Texture" id=1]
[ext_resource path="res://assets/caster.png" type="Texture" id=2]
[ext_resource path="res://scenes/Aim.tscn" type="PackedScene" id=3]
[ext_resource path="res://scenes/PlayerLight.tscn" type="PackedScene" id=4]
[ext_resource path="res://assets/crackling.ogg" type="AudioStream" id=5]
[ext_resource path="res://assets/land.wav" type="AudioStream" id=6]

[sub_resource type="GDScript" id=1]
script/source = "extends KinematicBody2D

export (int) var run_speed = 300
export (int) var jump_speed = -800
export (int) var gravity = 1500

var velocity = Vector2()
var jumping = false
var direction = 1
var aimrotation = 0
var disablelight = 0
var landing = true


func walksound():
    if not $Land.playing:
        $Land.volume_db = -20
        $Land.pitch_scale = randf()+1
        $Land.play()

func get_input():
    velocity.x = 0
    var right = Input.is_action_pressed('right')
    var left = Input.is_action_pressed('left')
    var up = Input.is_action_pressed('up')
    var down = Input.is_action_pressed('down')
    var jump = Input.is_action_just_pressed('jump')
    
    if up and aimrotation > -90:
        aimrotation -= 1
    if down and aimrotation < 90:
        aimrotation += 1
    
    if jump and is_on_floor():
        jumping = true
        velocity.y = jump_speed
    if right:
        direction = 1
        velocity.x += run_speed
    if left:
        direction = -1
        velocity.x -= run_speed
    if is_on_floor() and (left or right):
        walksound()


func _physics_process(delta):
    get_input()
    if is_on_floor() and landing:
        $Land.volume_db = -10
        $Land.pitch_scale = randf()+1
        $Land.play()
        landing = false
    if not is_on_floor():
        landing = true
    velocity.y += gravity * delta
    if jumping and is_on_floor():
        jumping = false
    velocity = move_and_slide(velocity, Vector2(0, -1))
    if direction == 1:
        $Aim.rotation_degrees = aimrotation
    else:
        $Aim.rotation_degrees = 180 + (-aimrotation)
        
    for i in get_slide_count():
        var collision = get_slide_collision(i)
        if collision.collider.name == \"Spikes\":
            get_tree().reload_current_scene()

func _process(delta):       
    if disablelight == 0:
        $PlayerLight/Light2D.hide()
        $Aim/Light2D.hide()
    if disablelight < 50:
        disablelight += 1
    if disablelight >= 50 and disablelight < 1000:
        $PlayerLight/Light2D.show()
        $Aim/Light2D.show()
        disablelight = 1000
        $Crackling.pitch_scale = randf()*5 +1
        $Crackling.volume_db = randf()*5
        $Crackling.play()
"

[sub_resource type="RectangleShape2D" id=2]

[sub_resource type="OccluderPolygon2D" id=3]
closed = false
cull_mode = 1
polygon = PoolVector2Array( -13, -13, -13, 13, 13, 13, 13, -13, -13, -13 )

[node name="Node2D" type="KinematicBody2D"]
position = Vector2( 0, 300 )
script = SubResource( 1 )

[node name="CanvasModulate" type="CanvasModulate" parent="."]
color = Color( 0, 0, 0, 1 )

[node name="Background" type="Sprite" parent="."]
position = Vector2( -22.4062, -50.7559 )
scale = Vector2( 32.7052, 19.866 )
texture = ExtResource( 1 )

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
scale = Vector2( 1.6, 1.6 )
shape = SubResource( 2 )

[node name="Sprite" type="Sprite" parent="."]
texture = ExtResource( 2 )

[node name="LightOccluder2D" type="LightOccluder2D" parent="Sprite"]
light_mask = 1024
occluder = SubResource( 3 )
light_mask = 1024

[node name="Aim" parent="." instance=ExtResource( 3 )]

[node name="PlayerLight" parent="." instance=ExtResource( 4 )]

[node name="Camera2D" type="Camera2D" parent="."]
current = true

[node name="Crackling" type="AudioStreamPlayer" parent="."]
stream = ExtResource( 5 )

[node name="Land" type="AudioStreamPlayer" parent="."]
stream = ExtResource( 6 )
volume_db = -20.0
